{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6e786628",
   "metadata": {
    "papermill": {
     "duration": 0.00814,
     "end_time": "2023-11-30T19:54:09.885718",
     "exception": false,
     "start_time": "2023-11-30T19:54:09.877578",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Intro\n",
    "Basically this environment is to essay different things from preprocessing to everything else. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "81f5ef8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:09.903646Z",
     "iopub.status.busy": "2023-11-30T19:54:09.902988Z",
     "iopub.status.idle": "2023-11-30T19:54:23.382510Z",
     "shell.execute_reply": "2023-11-30T19:54:23.381258Z"
    },
    "papermill": {
     "duration": 13.492451,
     "end_time": "2023-11-30T19:54:23.385949",
     "exception": false,
     "start_time": "2023-11-30T19:54:09.893498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.layers.experimental import preprocessing\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "\n",
    "def set_seed(seed=35643419):\n",
    "    np.random.seed(seed)\n",
    "    tf.random.set_seed(seed)\n",
    "    os.environ['PYTHONHASHSEED'] = str(seed)\n",
    "    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n",
    "set_seed(35643419)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "66af4c69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:23.405246Z",
     "iopub.status.busy": "2023-11-30T19:54:23.404236Z",
     "iopub.status.idle": "2023-11-30T19:54:30.551124Z",
     "shell.execute_reply": "2023-11-30T19:54:30.550086Z"
    },
    "papermill": {
     "duration": 7.159667,
     "end_time": "2023-11-30T19:54:30.554137",
     "exception": false,
     "start_time": "2023-11-30T19:54:23.394470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/digit-recognizer/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9c4ba7d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:30.571599Z",
     "iopub.status.busy": "2023-11-30T19:54:30.570987Z",
     "iopub.status.idle": "2023-11-30T19:54:30.605066Z",
     "shell.execute_reply": "2023-11-30T19:54:30.603804Z"
    },
    "papermill": {
     "duration": 0.046226,
     "end_time": "2023-11-30T19:54:30.608048",
     "exception": false,
     "start_time": "2023-11-30T19:54:30.561822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7b851707",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:30.626209Z",
     "iopub.status.busy": "2023-11-30T19:54:30.625792Z",
     "iopub.status.idle": "2023-11-30T19:54:30.630450Z",
     "shell.execute_reply": "2023-11-30T19:54:30.629312Z"
    },
    "papermill": {
     "duration": 0.016884,
     "end_time": "2023-11-30T19:54:30.632869",
     "exception": false,
     "start_time": "2023-11-30T19:54:30.615985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#We have more or less the same distribution of numbers\n",
    "#sns.histplot(train.label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "24225ccb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:30.650441Z",
     "iopub.status.busy": "2023-11-30T19:54:30.650033Z",
     "iopub.status.idle": "2023-11-30T19:54:30.832336Z",
     "shell.execute_reply": "2023-11-30T19:54:30.831058Z"
    },
    "papermill": {
     "duration": 0.194168,
     "end_time": "2023-11-30T19:54:30.834956",
     "exception": false,
     "start_time": "2023-11-30T19:54:30.640788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labels = train['label']\n",
    "pixels = train.drop('label', axis=1)\n",
    "\n",
    "images = pixels.values.reshape(-1, 28, 28)\n",
    "\n",
    "#for i in [0,1,2,3,4]:\n",
    " #   plt.imshow(images[i], cmap='gray')\n",
    "  #  plt.title(f\"Label: {labels[i]}\")\n",
    "   # plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "07714f01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:30.852607Z",
     "iopub.status.busy": "2023-11-30T19:54:30.852199Z",
     "iopub.status.idle": "2023-11-30T19:54:31.245485Z",
     "shell.execute_reply": "2023-11-30T19:54:31.244174Z"
    },
    "papermill": {
     "duration": 0.405637,
     "end_time": "2023-11-30T19:54:31.248421",
     "exception": false,
     "start_time": "2023-11-30T19:54:30.842784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pixels_train, pixels_valid, labels_train, labels_valid = train_test_split(\n",
    "    pixels,  \n",
    "    labels,  \n",
    "    test_size=0.3,\n",
    "    random_state=35643419 \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3408ad96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:31.265850Z",
     "iopub.status.busy": "2023-11-30T19:54:31.265419Z",
     "iopub.status.idle": "2023-11-30T19:54:31.270608Z",
     "shell.execute_reply": "2023-11-30T19:54:31.269635Z"
    },
    "papermill": {
     "duration": 0.016889,
     "end_time": "2023-11-30T19:54:31.273176",
     "exception": false,
     "start_time": "2023-11-30T19:54:31.256287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_train = pixels_train.values.reshape(-1, 28, 28)\n",
    "images_valid = pixels_valid.values.reshape(-1,28,28)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d1cace5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:31.290684Z",
     "iopub.status.busy": "2023-11-30T19:54:31.290299Z",
     "iopub.status.idle": "2023-11-30T19:54:31.296770Z",
     "shell.execute_reply": "2023-11-30T19:54:31.295754Z"
    },
    "papermill": {
     "duration": 0.017784,
     "end_time": "2023-11-30T19:54:31.299111",
     "exception": false,
     "start_time": "2023-11-30T19:54:31.281327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labels_train_one_hot = tf.keras.utils.to_categorical(labels_train, num_classes=10)\n",
    "labels_valid_one_hot = tf.keras.utils.to_categorical(labels_valid, num_classes=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3c284197",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:31.316236Z",
     "iopub.status.busy": "2023-11-30T19:54:31.315829Z",
     "iopub.status.idle": "2023-11-30T19:54:31.321467Z",
     "shell.execute_reply": "2023-11-30T19:54:31.319954Z"
    },
    "papermill": {
     "duration": 0.01715,
     "end_time": "2023-11-30T19:54:31.323986",
     "exception": false,
     "start_time": "2023-11-30T19:54:31.306836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_train_with_channel = images_train[..., np.newaxis]\n",
    "images_valid_with_channel = images_valid[..., np.newaxis]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d7267076",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:31.341400Z",
     "iopub.status.busy": "2023-11-30T19:54:31.340919Z",
     "iopub.status.idle": "2023-11-30T19:54:31.472959Z",
     "shell.execute_reply": "2023-11-30T19:54:31.471617Z"
    },
    "papermill": {
     "duration": 0.144556,
     "end_time": "2023-11-30T19:54:31.476315",
     "exception": false,
     "start_time": "2023-11-30T19:54:31.331759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = keras.Sequential([\n",
    "    #Data augmentation\n",
    "    preprocessing.Rescaling(scale=1./255),\n",
    "    #preprocessing.RandomContrast(factor=0.5),\n",
    "    #Filter + detect : obtain 64 features, moving 1 pixel in the two dimensions, treating borders equally (same)\n",
    "    layers.Conv2D(filters=64,kernel_size=3,strides=1,padding='same',activation='relu', input_shape=(28, 28, 1)),\n",
    "    #Condense features\n",
    "    layers.MaxPool2D(pool_size=2,strides=1,padding='same'),  \n",
    "    layers.Flatten(),\n",
    "    layers.Dense(10, activation='softmax'),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "93a3e34d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:31.494253Z",
     "iopub.status.busy": "2023-11-30T19:54:31.493854Z",
     "iopub.status.idle": "2023-11-30T19:54:31.529332Z",
     "shell.execute_reply": "2023-11-30T19:54:31.527938Z"
    },
    "papermill": {
     "duration": 0.048202,
     "end_time": "2023-11-30T19:54:31.532586",
     "exception": false,
     "start_time": "2023-11-30T19:54:31.484384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(\n",
    "    optimizer='rmsprop',\n",
    "    loss='categorical_crossentropy',\n",
    "    metrics=['accuracy'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "62b8c269",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:54:31.557282Z",
     "iopub.status.busy": "2023-11-30T19:54:31.556543Z",
     "iopub.status.idle": "2023-11-30T20:06:55.020549Z",
     "shell.execute_reply": "2023-11-30T20:06:55.018804Z"
    },
    "papermill": {
     "duration": 743.480558,
     "end_time": "2023-11-30T20:06:55.024127",
     "exception": false,
     "start_time": "2023-11-30T19:54:31.543569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "919/919 [==============================] - 37s 39ms/step - loss: 0.1926 - accuracy: 0.9412 - val_loss: 0.0892 - val_accuracy: 0.9711\n",
      "Epoch 2/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0732 - accuracy: 0.9789 - val_loss: 0.0695 - val_accuracy: 0.9783\n",
      "Epoch 3/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0521 - accuracy: 0.9843 - val_loss: 0.0635 - val_accuracy: 0.9801\n",
      "Epoch 4/20\n",
      "919/919 [==============================] - 34s 37ms/step - loss: 0.0418 - accuracy: 0.9878 - val_loss: 0.0646 - val_accuracy: 0.9795\n",
      "Epoch 5/20\n",
      "919/919 [==============================] - 34s 37ms/step - loss: 0.0324 - accuracy: 0.9905 - val_loss: 0.0642 - val_accuracy: 0.9821\n",
      "Epoch 6/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0257 - accuracy: 0.9924 - val_loss: 0.0807 - val_accuracy: 0.9784\n",
      "Epoch 7/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0208 - accuracy: 0.9944 - val_loss: 0.0885 - val_accuracy: 0.9763\n",
      "Epoch 8/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0159 - accuracy: 0.9950 - val_loss: 0.0762 - val_accuracy: 0.9800\n",
      "Epoch 9/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0129 - accuracy: 0.9962 - val_loss: 0.0775 - val_accuracy: 0.9815\n",
      "Epoch 10/20\n",
      "919/919 [==============================] - 34s 37ms/step - loss: 0.0102 - accuracy: 0.9971 - val_loss: 0.0805 - val_accuracy: 0.9813\n",
      "Epoch 11/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0084 - accuracy: 0.9975 - val_loss: 0.0890 - val_accuracy: 0.9804\n",
      "Epoch 12/20\n",
      "919/919 [==============================] - 34s 37ms/step - loss: 0.0054 - accuracy: 0.9986 - val_loss: 0.0847 - val_accuracy: 0.9824\n",
      "Epoch 13/20\n",
      "919/919 [==============================] - 36s 39ms/step - loss: 0.0043 - accuracy: 0.9988 - val_loss: 0.0875 - val_accuracy: 0.9825\n",
      "Epoch 14/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0033 - accuracy: 0.9989 - val_loss: 0.1014 - val_accuracy: 0.9814\n",
      "Epoch 15/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0027 - accuracy: 0.9992 - val_loss: 0.0975 - val_accuracy: 0.9819\n",
      "Epoch 16/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0017 - accuracy: 0.9997 - val_loss: 0.1003 - val_accuracy: 0.9827\n",
      "Epoch 17/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0013 - accuracy: 0.9996 - val_loss: 0.1025 - val_accuracy: 0.9826\n",
      "Epoch 18/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 0.0010 - accuracy: 0.9996 - val_loss: 0.1295 - val_accuracy: 0.9798\n",
      "Epoch 19/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 5.2897e-04 - accuracy: 0.9999 - val_loss: 0.1143 - val_accuracy: 0.9824\n",
      "Epoch 20/20\n",
      "919/919 [==============================] - 35s 38ms/step - loss: 3.4786e-04 - accuracy: 0.9999 - val_loss: 0.1136 - val_accuracy: 0.9831\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    images_train_with_channel, \n",
    "    labels_train_one_hot,\n",
    "    validation_data=(images_valid_with_channel, labels_valid_one_hot),\n",
    "    epochs=20\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f9905bd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T20:06:56.781012Z",
     "iopub.status.busy": "2023-11-30T20:06:56.780449Z",
     "iopub.status.idle": "2023-11-30T20:06:56.787174Z",
     "shell.execute_reply": "2023-11-30T20:06:56.785793Z"
    },
    "papermill": {
     "duration": 0.886875,
     "end_time": "2023-11-30T20:06:56.789886",
     "exception": false,
     "start_time": "2023-11-30T20:06:55.903011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "history_frame = pd.DataFrame(history.history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a201ac6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T20:06:58.587518Z",
     "iopub.status.busy": "2023-11-30T20:06:58.586802Z",
     "iopub.status.idle": "2023-11-30T20:06:58.592706Z",
     "shell.execute_reply": "2023-11-30T20:06:58.591405Z"
    },
    "papermill": {
     "duration": 0.869124,
     "end_time": "2023-11-30T20:06:58.595223",
     "exception": false,
     "start_time": "2023-11-30T20:06:57.726099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#history_frame.loc[5:, ['loss', 'val_loss']].plot()\n",
    "#history_frame.loc[5:, ['accuracy', 'val_accuracy']].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "922e6e73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T20:07:00.374724Z",
     "iopub.status.busy": "2023-11-30T20:07:00.373851Z",
     "iopub.status.idle": "2023-11-30T20:07:00.379441Z",
     "shell.execute_reply": "2023-11-30T20:07:00.378635Z"
    },
    "papermill": {
     "duration": 0.936594,
     "end_time": "2023-11-30T20:07:00.381761",
     "exception": false,
     "start_time": "2023-11-30T20:06:59.445167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_test = test.values.reshape(-1, 28, 28)\n",
    "images_test_with_channel = images_test[..., np.newaxis]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fd4fbbd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T20:07:02.205512Z",
     "iopub.status.busy": "2023-11-30T20:07:02.204839Z",
     "iopub.status.idle": "2023-11-30T20:07:10.249836Z",
     "shell.execute_reply": "2023-11-30T20:07:10.248668Z"
    },
    "papermill": {
     "duration": 9.008382,
     "end_time": "2023-11-30T20:07:10.252585",
     "exception": false,
     "start_time": "2023-11-30T20:07:01.244203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "875/875 [==============================] - 7s 8ms/step\n"
     ]
    }
   ],
   "source": [
    "pred = model.predict(images_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6b851b77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T20:07:12.027365Z",
     "iopub.status.busy": "2023-11-30T20:07:12.026944Z",
     "iopub.status.idle": "2023-11-30T20:07:12.032749Z",
     "shell.execute_reply": "2023-11-30T20:07:12.031712Z"
    },
    "papermill": {
     "duration": 0.908665,
     "end_time": "2023-11-30T20:07:12.034911",
     "exception": false,
     "start_time": "2023-11-30T20:07:11.126246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predicted_classes = np.argmax(pred, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a4e80016",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T20:07:13.858845Z",
     "iopub.status.busy": "2023-11-30T20:07:13.857742Z",
     "iopub.status.idle": "2023-11-30T20:07:13.863767Z",
     "shell.execute_reply": "2023-11-30T20:07:13.862779Z"
    },
    "papermill": {
     "duration": 0.956353,
     "end_time": "2023-11-30T20:07:13.866314",
     "exception": false,
     "start_time": "2023-11-30T20:07:12.909961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "image_ids = np.arange(1, len(predicted_classes) + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4ba8e3fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T20:07:15.682853Z",
     "iopub.status.busy": "2023-11-30T20:07:15.681682Z",
     "iopub.status.idle": "2023-11-30T20:07:15.688234Z",
     "shell.execute_reply": "2023-11-30T20:07:15.687149Z"
    },
    "papermill": {
     "duration": 0.954327,
     "end_time": "2023-11-30T20:07:15.690796",
     "exception": false,
     "start_time": "2023-11-30T20:07:14.736469",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_submission = pd.DataFrame({\n",
    "    'ImageId': image_ids,\n",
    "    'Label': predicted_classes\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "46ca6c99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T20:07:17.429093Z",
     "iopub.status.busy": "2023-11-30T20:07:17.428385Z",
     "iopub.status.idle": "2023-11-30T20:07:17.504262Z",
     "shell.execute_reply": "2023-11-30T20:07:17.503150Z"
    },
    "papermill": {
     "duration": 0.949873,
     "end_time": "2023-11-30T20:07:17.506939",
     "exception": false,
     "start_time": "2023-11-30T20:07:16.557066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_submission.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30558,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 795.815659,
   "end_time": "2023-11-30T20:07:21.287820",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-11-30T19:54:05.472161",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
