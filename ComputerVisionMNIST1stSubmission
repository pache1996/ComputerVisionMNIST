{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7380ba9a",
   "metadata": {
    "papermill": {
     "duration": 0.006929,
     "end_time": "2023-11-30T19:38:52.407251",
     "exception": false,
     "start_time": "2023-11-30T19:38:52.400322",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Intro\n",
    "Basically this environment is to essay different things from preprocessing to everything else. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1644f08d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:38:52.420566Z",
     "iopub.status.busy": "2023-11-30T19:38:52.419944Z",
     "iopub.status.idle": "2023-11-30T19:39:04.526259Z",
     "shell.execute_reply": "2023-11-30T19:39:04.524369Z"
    },
    "papermill": {
     "duration": 12.11515,
     "end_time": "2023-11-30T19:39:04.528594",
     "exception": false,
     "start_time": "2023-11-30T19:38:52.413444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.layers.experimental import preprocessing\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "\n",
    "def set_seed(seed=35643419):\n",
    "    np.random.seed(seed)\n",
    "    tf.random.set_seed(seed)\n",
    "    os.environ['PYTHONHASHSEED'] = str(seed)\n",
    "    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n",
    "set_seed(35643419)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "30c007f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:04.541293Z",
     "iopub.status.busy": "2023-11-30T19:39:04.539812Z",
     "iopub.status.idle": "2023-11-30T19:39:08.559454Z",
     "shell.execute_reply": "2023-11-30T19:39:08.558069Z"
    },
    "papermill": {
     "duration": 4.028413,
     "end_time": "2023-11-30T19:39:08.562281",
     "exception": false,
     "start_time": "2023-11-30T19:39:04.533868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/digit-recognizer/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d3b0bda1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:08.573730Z",
     "iopub.status.busy": "2023-11-30T19:39:08.573340Z",
     "iopub.status.idle": "2023-11-30T19:39:08.605232Z",
     "shell.execute_reply": "2023-11-30T19:39:08.603589Z"
    },
    "papermill": {
     "duration": 0.040404,
     "end_time": "2023-11-30T19:39:08.607831",
     "exception": false,
     "start_time": "2023-11-30T19:39:08.567427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5c42ca43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:08.621738Z",
     "iopub.status.busy": "2023-11-30T19:39:08.621279Z",
     "iopub.status.idle": "2023-11-30T19:39:08.625424Z",
     "shell.execute_reply": "2023-11-30T19:39:08.624479Z"
    },
    "papermill": {
     "duration": 0.01433,
     "end_time": "2023-11-30T19:39:08.628114",
     "exception": false,
     "start_time": "2023-11-30T19:39:08.613784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#We have more or less the same distribution of numbers\n",
    "#sns.histplot(train.label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "90a83492",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:08.642075Z",
     "iopub.status.busy": "2023-11-30T19:39:08.641659Z",
     "iopub.status.idle": "2023-11-30T19:39:08.716939Z",
     "shell.execute_reply": "2023-11-30T19:39:08.715730Z"
    },
    "papermill": {
     "duration": 0.084649,
     "end_time": "2023-11-30T19:39:08.719115",
     "exception": false,
     "start_time": "2023-11-30T19:39:08.634466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labels = train['label']\n",
    "pixels = train.drop('label', axis=1)\n",
    "\n",
    "images = pixels.values.reshape(-1, 28, 28)\n",
    "\n",
    "#for i in [0,1,2,3,4]:\n",
    " #   plt.imshow(images[i], cmap='gray')\n",
    "  #  plt.title(f\"Label: {labels[i]}\")\n",
    "   # plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "aa53eafb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:08.731547Z",
     "iopub.status.busy": "2023-11-30T19:39:08.731126Z",
     "iopub.status.idle": "2023-11-30T19:39:08.981948Z",
     "shell.execute_reply": "2023-11-30T19:39:08.980367Z"
    },
    "papermill": {
     "duration": 0.260145,
     "end_time": "2023-11-30T19:39:08.984654",
     "exception": false,
     "start_time": "2023-11-30T19:39:08.724509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pixels_train, pixels_valid, labels_train, labels_valid = train_test_split(\n",
    "    pixels,  \n",
    "    labels,  \n",
    "    test_size=0.3,\n",
    "    random_state=35643419 \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ecbfd43b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:08.996979Z",
     "iopub.status.busy": "2023-11-30T19:39:08.996538Z",
     "iopub.status.idle": "2023-11-30T19:39:09.003182Z",
     "shell.execute_reply": "2023-11-30T19:39:09.001514Z"
    },
    "papermill": {
     "duration": 0.015486,
     "end_time": "2023-11-30T19:39:09.005428",
     "exception": false,
     "start_time": "2023-11-30T19:39:08.989942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_train = pixels_train.values.reshape(-1, 28, 28)\n",
    "images_valid = pixels_valid.values.reshape(-1,28,28)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cd5bdbed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:09.017431Z",
     "iopub.status.busy": "2023-11-30T19:39:09.017074Z",
     "iopub.status.idle": "2023-11-30T19:39:09.024005Z",
     "shell.execute_reply": "2023-11-30T19:39:09.022449Z"
    },
    "papermill": {
     "duration": 0.015404,
     "end_time": "2023-11-30T19:39:09.026250",
     "exception": false,
     "start_time": "2023-11-30T19:39:09.010846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labels_train_one_hot = tf.keras.utils.to_categorical(labels_train, num_classes=10)\n",
    "labels_valid_one_hot = tf.keras.utils.to_categorical(labels_valid, num_classes=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8e6fc347",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:09.038982Z",
     "iopub.status.busy": "2023-11-30T19:39:09.038521Z",
     "iopub.status.idle": "2023-11-30T19:39:09.044593Z",
     "shell.execute_reply": "2023-11-30T19:39:09.043401Z"
    },
    "papermill": {
     "duration": 0.01586,
     "end_time": "2023-11-30T19:39:09.047309",
     "exception": false,
     "start_time": "2023-11-30T19:39:09.031449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_train_with_channel = images_train[..., np.newaxis]\n",
    "images_valid_with_channel = images_valid[..., np.newaxis]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e1c16db8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:09.059715Z",
     "iopub.status.busy": "2023-11-30T19:39:09.059290Z",
     "iopub.status.idle": "2023-11-30T19:39:09.176179Z",
     "shell.execute_reply": "2023-11-30T19:39:09.174726Z"
    },
    "papermill": {
     "duration": 0.126208,
     "end_time": "2023-11-30T19:39:09.178976",
     "exception": false,
     "start_time": "2023-11-30T19:39:09.052768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = keras.Sequential([\n",
    "    #Data augmentation\n",
    "    preprocessing.Rescaling(scale=1./255),\n",
    "    #preprocessing.RandomContrast(factor=0.5),\n",
    "    #Filter + detect : obtain 64 features, moving 1 pixel in the two dimensions, treating borders equally (same)\n",
    "    layers.Conv2D(filters=64,kernel_size=3,strides=1,padding='same',activation='relu', input_shape=(28, 28, 1)),\n",
    "    #Condense features\n",
    "    layers.MaxPool2D(pool_size=2,strides=1,padding='same'),  \n",
    "    layers.Flatten(),\n",
    "    layers.Dense(10, activation='softmax'),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "398a7d87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:09.191243Z",
     "iopub.status.busy": "2023-11-30T19:39:09.190868Z",
     "iopub.status.idle": "2023-11-30T19:39:09.226527Z",
     "shell.execute_reply": "2023-11-30T19:39:09.224787Z"
    },
    "papermill": {
     "duration": 0.045271,
     "end_time": "2023-11-30T19:39:09.229586",
     "exception": false,
     "start_time": "2023-11-30T19:39:09.184315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(\n",
    "    optimizer='rmsprop',\n",
    "    loss='categorical_crossentropy',\n",
    "    metrics=['accuracy'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3190ffd8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:39:09.244466Z",
     "iopub.status.busy": "2023-11-30T19:39:09.244082Z",
     "iopub.status.idle": "2023-11-30T19:48:32.212251Z",
     "shell.execute_reply": "2023-11-30T19:48:32.211373Z"
    },
    "papermill": {
     "duration": 562.978808,
     "end_time": "2023-11-30T19:48:32.214770",
     "exception": false,
     "start_time": "2023-11-30T19:39:09.235962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "919/919 [==============================] - 29s 31ms/step - loss: 0.1797 - accuracy: 0.9451 - val_loss: 0.0860 - val_accuracy: 0.9725\n",
      "Epoch 2/20\n",
      "919/919 [==============================] - 28s 31ms/step - loss: 0.0701 - accuracy: 0.9793 - val_loss: 0.0676 - val_accuracy: 0.9787\n",
      "Epoch 3/20\n",
      "919/919 [==============================] - 29s 31ms/step - loss: 0.0505 - accuracy: 0.9849 - val_loss: 0.0619 - val_accuracy: 0.9814\n",
      "Epoch 4/20\n",
      "919/919 [==============================] - 28s 30ms/step - loss: 0.0405 - accuracy: 0.9883 - val_loss: 0.0616 - val_accuracy: 0.9810\n",
      "Epoch 5/20\n",
      "919/919 [==============================] - 28s 30ms/step - loss: 0.0316 - accuracy: 0.9909 - val_loss: 0.0618 - val_accuracy: 0.9817\n",
      "Epoch 6/20\n",
      "919/919 [==============================] - 28s 30ms/step - loss: 0.0250 - accuracy: 0.9927 - val_loss: 0.0788 - val_accuracy: 0.9793\n",
      "Epoch 7/20\n",
      "919/919 [==============================] - 27s 30ms/step - loss: 0.0200 - accuracy: 0.9942 - val_loss: 0.0877 - val_accuracy: 0.9756\n",
      "Epoch 8/20\n",
      "919/919 [==============================] - 28s 30ms/step - loss: 0.0153 - accuracy: 0.9953 - val_loss: 0.0747 - val_accuracy: 0.9816\n",
      "Epoch 9/20\n",
      "919/919 [==============================] - 28s 30ms/step - loss: 0.0125 - accuracy: 0.9963 - val_loss: 0.0763 - val_accuracy: 0.9821\n",
      "Epoch 10/20\n",
      "919/919 [==============================] - 27s 29ms/step - loss: 0.0099 - accuracy: 0.9974 - val_loss: 0.0761 - val_accuracy: 0.9833\n",
      "Epoch 11/20\n",
      "919/919 [==============================] - 27s 29ms/step - loss: 0.0078 - accuracy: 0.9977 - val_loss: 0.0844 - val_accuracy: 0.9810\n",
      "Epoch 12/20\n",
      "919/919 [==============================] - 27s 30ms/step - loss: 0.0055 - accuracy: 0.9986 - val_loss: 0.0804 - val_accuracy: 0.9824\n",
      "Epoch 13/20\n",
      "919/919 [==============================] - 28s 30ms/step - loss: 0.0045 - accuracy: 0.9988 - val_loss: 0.0886 - val_accuracy: 0.9823\n",
      "Epoch 14/20\n",
      "919/919 [==============================] - 29s 31ms/step - loss: 0.0033 - accuracy: 0.9991 - val_loss: 0.1006 - val_accuracy: 0.9817\n",
      "Epoch 15/20\n",
      "919/919 [==============================] - 28s 31ms/step - loss: 0.0024 - accuracy: 0.9994 - val_loss: 0.0963 - val_accuracy: 0.9817\n",
      "Epoch 16/20\n",
      "919/919 [==============================] - 28s 30ms/step - loss: 0.0016 - accuracy: 0.9996 - val_loss: 0.0963 - val_accuracy: 0.9829\n",
      "Epoch 17/20\n",
      "919/919 [==============================] - 28s 30ms/step - loss: 0.0011 - accuracy: 0.9997 - val_loss: 0.1064 - val_accuracy: 0.9829\n",
      "Epoch 18/20\n",
      "919/919 [==============================] - 29s 32ms/step - loss: 7.6439e-04 - accuracy: 0.9998 - val_loss: 0.1198 - val_accuracy: 0.9810\n",
      "Epoch 19/20\n",
      "919/919 [==============================] - 28s 31ms/step - loss: 3.7669e-04 - accuracy: 0.9999 - val_loss: 0.1095 - val_accuracy: 0.9832\n",
      "Epoch 20/20\n",
      "919/919 [==============================] - 28s 30ms/step - loss: 2.8728e-04 - accuracy: 0.9999 - val_loss: 0.1161 - val_accuracy: 0.9829\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    images_train_with_channel, \n",
    "    labels_train_one_hot,\n",
    "    validation_data=(images_valid_with_channel, labels_valid_one_hot),\n",
    "    epochs=20\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6e26b17d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:48:33.286693Z",
     "iopub.status.busy": "2023-11-30T19:48:33.285905Z",
     "iopub.status.idle": "2023-11-30T19:48:33.291743Z",
     "shell.execute_reply": "2023-11-30T19:48:33.290061Z"
    },
    "papermill": {
     "duration": 0.541592,
     "end_time": "2023-11-30T19:48:33.294417",
     "exception": false,
     "start_time": "2023-11-30T19:48:32.752825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "history_frame = pd.DataFrame(history.history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "45629b14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:48:34.446069Z",
     "iopub.status.busy": "2023-11-30T19:48:34.445540Z",
     "iopub.status.idle": "2023-11-30T19:48:34.449600Z",
     "shell.execute_reply": "2023-11-30T19:48:34.448136Z"
    },
    "papermill": {
     "duration": 0.545368,
     "end_time": "2023-11-30T19:48:34.451331",
     "exception": false,
     "start_time": "2023-11-30T19:48:33.905963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#history_frame.loc[5:, ['loss', 'val_loss']].plot()\n",
    "#history_frame.loc[5:, ['accuracy', 'val_accuracy']].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9e5ee247",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:48:35.615222Z",
     "iopub.status.busy": "2023-11-30T19:48:35.614835Z",
     "iopub.status.idle": "2023-11-30T19:48:35.621448Z",
     "shell.execute_reply": "2023-11-30T19:48:35.619312Z"
    },
    "papermill": {
     "duration": 0.634446,
     "end_time": "2023-11-30T19:48:35.624164",
     "exception": false,
     "start_time": "2023-11-30T19:48:34.989718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "images_test = test.values.reshape(-1, 28, 28)\n",
    "images_test_with_channel = images_test[..., np.newaxis]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "305090d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:48:36.780181Z",
     "iopub.status.busy": "2023-11-30T19:48:36.779851Z",
     "iopub.status.idle": "2023-11-30T19:48:43.249525Z",
     "shell.execute_reply": "2023-11-30T19:48:43.246393Z"
    },
    "papermill": {
     "duration": 7.100519,
     "end_time": "2023-11-30T19:48:43.252789",
     "exception": false,
     "start_time": "2023-11-30T19:48:36.152270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "875/875 [==============================] - 6s 7ms/step\n"
     ]
    }
   ],
   "source": [
    "pred = model.predict(images_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c91ceebd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:48:44.381143Z",
     "iopub.status.busy": "2023-11-30T19:48:44.380149Z",
     "iopub.status.idle": "2023-11-30T19:48:44.385592Z",
     "shell.execute_reply": "2023-11-30T19:48:44.384925Z"
    },
    "papermill": {
     "duration": 0.574978,
     "end_time": "2023-11-30T19:48:44.388539",
     "exception": false,
     "start_time": "2023-11-30T19:48:43.813561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predicted_classes = np.argmax(pred, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cd11b712",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:48:45.613018Z",
     "iopub.status.busy": "2023-11-30T19:48:45.612461Z",
     "iopub.status.idle": "2023-11-30T19:48:45.617604Z",
     "shell.execute_reply": "2023-11-30T19:48:45.616700Z"
    },
    "papermill": {
     "duration": 0.669233,
     "end_time": "2023-11-30T19:48:45.619525",
     "exception": false,
     "start_time": "2023-11-30T19:48:44.950292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "image_ids = np.arange(1, len(predicted_classes) + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "670cae21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:48:46.765861Z",
     "iopub.status.busy": "2023-11-30T19:48:46.765352Z",
     "iopub.status.idle": "2023-11-30T19:48:46.770844Z",
     "shell.execute_reply": "2023-11-30T19:48:46.770017Z"
    },
    "papermill": {
     "duration": 0.56751,
     "end_time": "2023-11-30T19:48:46.772697",
     "exception": false,
     "start_time": "2023-11-30T19:48:46.205187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_submission = pd.DataFrame({\n",
    "    'id': image_ids,\n",
    "    'predicted_classes': predicted_classes\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e69a20e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-30T19:48:47.948751Z",
     "iopub.status.busy": "2023-11-30T19:48:47.948315Z",
     "iopub.status.idle": "2023-11-30T19:48:47.981364Z",
     "shell.execute_reply": "2023-11-30T19:48:47.980311Z"
    },
    "papermill": {
     "duration": 0.592499,
     "end_time": "2023-11-30T19:48:47.983552",
     "exception": false,
     "start_time": "2023-11-30T19:48:47.391053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_submission.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30558,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 602.465272,
   "end_time": "2023-11-30T19:48:51.061746",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-11-30T19:38:48.596474",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
